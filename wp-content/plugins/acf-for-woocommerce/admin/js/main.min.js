"use strict";function cpb_get_elements(){return[{label:"Text Field",id:"text_field",icon:"form",category:"Basic",name:"",settings:{name:{category:"",type:"input",value:"",label:"Field name",placeholder:"Field name in form submit",description:"Lorem ipsum dolor sit amet, consectetur adipisicing elit."},label:{type:"input",value:"",label:"Label"},placeholder:{type:"input",value:"",label:"Placeholder"},default:{type:"input",value:"",label:"Default value"},type:{type:"radio_button",value:"text",label:"Type",options:{text:"Text field",email:"Email",number:"Number",password:"Password"}}}},{label:"Radio",id:"radio",category:"Basic",icon:"check-circle",name:"",settings:{name:{type:"input",label:"Field name",placeholder:"Field name in form submit"},label:{type:"input",value:"",label:"Label"},default:{type:"input",value:"",label:"Default value"},options:{label:"Options",type:"textarea",value:"",placeholder:"value : key\r\nvalue : key"}}},{label:"Checkbox",id:"checkbox",category:"Basic",icon:"check-square",name:"",settings:{name:{type:"input",label:"Field name",placeholder:"Field name in form submit"},label:{type:"input",value:"",label:"Label"},default:{type:"input",value:"",label:"Default value"},options:{label:"Options",type:"textarea",value:"",placeholder:"value : key\r\nvalue : key"}}},{label:"Select Box",id:"select",category:"Basic",icon:"menu-unfold",name:"",settings:{name:{type:"input",label:"Field name",placeholder:"Field name in form submit"},label:{type:"input",value:"",label:"Label"},default:{type:"input",value:"",label:"Default value"},options:{label:"Options",type:"textarea",value:"",placeholder:"value : key\r\nvalue : key"}}},{label:"Button",id:"button",category:"Basic",icon:"border",name:"",settings:{name:{type:"input",label:"Field name",placeholder:"Field name in form submit"},label:{type:"input",value:"",label:"Label"},type:{type:"radio",value:"",label:"Type",options:{submit:"Submit",button:"Button",reset:"Reset"}}}}]}var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj},cpb={add_filter:function(name,params){"object"!=_typeof(window.cpb_builder)&&(window.cpb_builder=[]),"object"!=_typeof(window.cpb_builder[name])&&(window.cpb_builder[name]=[]),window.cpb_builder[name].push(params)},apply_filters:function(name,params){return"object"==_typeof(window.cpb_builder)&&"object"==_typeof(window.cpb_builder[name])&&window.cpb_builder[name].map(function(v){"function"==typeof v&&(params=v(params))}),params}};Vue.component("cp-row",{props:[],template:"\n      \n    "});var cpArrayFuncs={deleteByIndex:function(arrays,index){return arrays.splice(index,1)}};Vue.directive("cpbresizecol",{inserted:function(el,binding){void 0===window.cpbuilder&&(window.cpbuilder={}),$(el).addClass("cpbresizecol"),window.cpbuilder.response_mode=binding.value.mode,$(el).on("mousedown",function(){window.cpbuilder.resize_el=$(el).closest(".cpb-col"),window.cpbuilder.resize_vl=binding.value.col}),"added"!=window.cpbuilder.resize_fn_remove&&(window.cpbuilder.resize_fn_remove="added",$(document).on("mouseup",function(){window.cpbuilder.resize_el=!1,window.cpbuilder.resize_vl=!1})),"added"!=window.cpbuilder.resize_fn_handle&&(window.cpbuilder.resize_fn_handle="added",$(document).on("mousemove",function(e){if(void 0!==window.cpbuilder.resize_el&&0!=window.cpbuilder.resize_el){var $row=window.cpbuilder.resize_el.closest(".cpb-row"),offsetParent=window.cpbuilder.resize_el.offset().left,precent=$row.width()/12,fakeW=e.pageX-offsetParent;(fakeW=Math.ceil(fakeW/precent))<=1&&(fakeW=1);var state=window.cpbuilder.response_mode;window.cpbuilder.resize_vl.width[state]=fakeW}}))},componentUpdated:function(el,binding){window.cpbuilder.response_mode=binding.value.mode,$(el).on("mousedown",function(){window.cpbuilder.resize_el=$(el).closest(".cpb-col"),window.cpbuilder.resize_vl=binding.value.col})}}),Vue.component("cpb-popup-setting",{template:'<div><a-tabs>\n        <a-tab-pane v-for="tab, indexLoop in getTabs(current_element.settings)" :tab="tab" :key="tab">\n            <div class="cpb-row-settings" v-if="indexLoop==0">\n                <div class="ant-form-item ant-form-item-with-help">\n                    <div class="ant-form-item-label">\n                        <label title="Field name">Name Input (Unique)</label>\n                        </div> \n                    <div class="ant-form-item-control-wrapper">\n                        <div class="ant-form-item-control has-feedback ">\n                            <div class="ant-form-item-children">\n                                <input placeholder="" v-model="current_element.name" type="text" id="" class="ant-input">\n                            </div>\n                            <i class="cpb-text-error">{{ current_element.error_message }}</i>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            \n            <div class="cpb-row-settings" v-for="setting, setting_key in current_element.settings">\n                <div v-if="setting.category == tab" class="ant-form-item ant-form-item-with-help" :class="\'cpb-element-\' + setting_key">\n                    <row-settings :root="root" :element="setting" :element_key="setting_key" ></row-settings>\n                </div> \n            </div>\n        </a-tab-pane>\n    </a-tabs> </div>',data:function(){return{error_message:""}},props:["root","current_element","named"],watch:{"current_element.name":function(){this.root;var that=this;that.current_element.error_message="",Object.keys(that.named).some(function(key){if(""!=that.named[key]&&that.current_element.hash!=key&&that.named[key]==that.current_element.name)return!(that.current_element.error_message="Name is existed!")})}},methods:{getTabs:function(elms){if("object"==(void 0===elms?"undefined":_typeof(elms))){var categoies=[];return Object.keys(elms).map(function(v){var _c="General";void 0!==elms[v].category&&""!=elms[v].category&&(_c=elms[v].category),categoies.indexOf(_c)<0&&categoies.push(_c)}),categoies}return[]}}}),Vue.component("row-settings",{template:'<div>\n        <div class="ant-form-item-label">\n            <label :title="element.label" class="">{{ element.label }}</label>\n        </div>\n\n        <div class="ant-form-item-control-wrapper">\n\n            <div class="ant-form-item-control has-feedback ">\n                \n                <span v-if="element.type == \'input\'" class="ant-form-item-children">\n                    <input :placeholder="element.placeholder" v-model="element.value" type="text" id="" class="ant-input">\n                </span>\n\n                <span v-if="element.type == \'textarea\'"  class="ant-form-item-children">\n                    <a-textarea :autosize="true" :placeholder="element.placeholder"  v-model="element.value"/>\n                </span>\n\n                <span v-if="element.type == \'radio\'"  class="ant-form-item-children">\n                    <a-radio-group v-model="element.value">\n                        <a-radio v-for="otp, id in element.options" :key="id" style="width: 100%" :value="id">{{ otp }}</a-radio>\n                    </a-radio-group>\n                </span>\n                \n                <span v-if="element.type == \'switch\'"  class="ant-form-item-children">\n                    <a-switch v-model="element.value" />\n                </span>\n\n                <div v-if="element.type == \'radio_button\'"  class="ant-form-item-children solid">\n                    <a-radio-group v-model="element.value" buttonStyle="solid">\n                        <a-radio-button v-for="otp, id in element.options" :key="id" :value="id">{{ otp }}</a-radio-button>\n                    </a-radio-group>\n                </div>\n\n                <span v-if="element.type == \'select\'"  class="ant-form-item-children">\n                    <a-select\n                        v-model="element.value"\n                        showSearch\n                        placeholder="Select a option"\n                        style="width: 100%"\n                    >\n                        <a-select-option v-for="otp, id in element.options" :key="id" :value="id">{{ otp }}</a-select-option>\n                    </a-select>\n                </span>\n\n                <span v-if="element.type == \'cascader\'"  class="ant-form-item-children">\n                    <a-cascader \n                    style="width: 100%"\n                    v-model="element.value"\n                    :options="element.options" changeOnSelect />\n                </span>\n\n                <i v-if="element.description != \'\'" class="ant-form-explain">{{ element.description }}</i>\n            </div>\n        </div>\n    </div>\n    ',data:function(){return{}},props:["root","element","element_key"],watch:{element:{handler:function(newV){console.log(newV)},deep:!0}},methods:{}}),Vue.component("cp-builder",{props:{layouts:{type:Array,default:function(){return[]}},valiable_elements:{type:Array,default:function(){return[]}}},template:'\n        <div class="cpb-wrapper">\n            <div class="">\n                Responsive: \n                <a-radio-group class="" v-model="mode_design" buttonStyle="solid">\n                    <a-radio-button value="md">Desktop</a-radio-button>\n                    <a-radio-button value="sm">Table</a-radio-button>\n                    <a-radio-button value="xs">Mobile</a-radio-button>\n                </a-radio-group>\n            </div>\n\n            <div class="cpb-main" :class="\'cpb-resmode-\' + mode_design">\n                <div class="cpb-row cpb-row-blank" v-if="layouts.length == 0">\n                    <div class="cpb-blank">\n                        <div class="cpb-title">You have a blank page</div>\n                        <div class="cpb-subtitle" @click="addRow(3)"><a>Add new element or row/column layout</a></div>\n                    </div>\n                </div>\n                <draggable v-model="layouts" handle=".cpb-handle-sort">\n                    <div class="cpb-row" v-for="row, index in layouts" :key="index"> \n                        <div class="cpb-row-tools">\n                            <button class="cpb-handle-sort">Sort</button>\n                            <button @click.prevent="deleteRow(layouts, index)" class="cpb-handle-delete">Delete</button>\n                            <button @click.prevent="addCol(row)" class="cpb-handle-add">Add</button>\n                            <button @click.prevent="openSettingRow(row)" class="cpb-handle-setting">Setting</button>\n                            <a-switch v-model="row.active" />\n                        </div>\n\n                        <template  v-if="row.active">\n                            <div class="cpb-col" :class="getClassCol(col)" v-for="col, indexcol in row.cols">\n                                <button v-cpbresizecol="{col:col, \'mode\': mode_design}" class="cob-resize-col"></button>\n                                <div class="cpb-entry">\n                                    <draggable class="list-group" :list="col.elements" group="elements_in_col">\n                                        <div class="cpb-element-selected"  v-for="element, index in col.elements" :key="element.name + index">\n                                            <a-button class="cpb-btn-component" @click.prevent="openSettingField(element)" :icon="element.icon" block>\n                                                <b>{{ element.label }} </b>\n                                            </a-button>\n                                            <div class="cpb-com-tools">\n                                                <a @click.prevent="openSettingField(element)" class="cpb-icon-settings">Cài đặt</a>\n                                                <a @click.prevent="deleteElement(col.elements, index)" class="cpb-icon-delete"> Xoá</a>\n                                            </div>\n                                        </div>\n                                    </draggable>\n                                    <button v-if="col.elements.length == 0" class="cpb-add-element" @click.prevent="addElement(col)">+ Add Element</button>\n                                    \n                                    <div class="cpb-tool-col">\n                                        <button class="cpb-delete-col" @click.prevent="deleteCol(row.cols, indexcol)">Delete this Col</button>\n                                        <button class="cpb-add-element mini" @click.prevent="addElement(col)">+ Add Element</button>\n                                    </div>\n                                    \n                                </div>\n                            </div>\n                        </template>\n                    </div>\n                </draggable>\n            </div>\n\n            <div class="cpb-footer-toolbar">\n                <button @click.prevent="addRow(1)" class="cpb-btn-addcol cpb-1col btn btn-sm"><span class="cpb-fake-col"></span></button>\n                <button @click.prevent="addRow(2)" class="cpb-btn-addcol cpb-2col btn btn-sm"><span v-for="i in [1,2]" class="cpb-fake-col"></span></button>\n                <button @clickprevent="addRow(3)" class="cpb-btn-addcol cpb-3col btn btn-sm"><span v-for="i in [1,2,3]" class="cpb-fake-col"></span></button>\n                <button @click.prevent="addRow(4)" class="cpb-btn-addcol cpb-4col btn btn-sm"><span v-for="i in [1,2,3,4]" class="cpb-fake-col"></span></button>\n                <button @click.prevent="addRow(6)" class="cpb-btn-addcol cpb-6col btn btn-sm"><span v-for="i in [1,2,3,4,5,6]" class="cpb-fake-col"></span></button>\n            </div>\n\n            <!-- Templates -->\n                <a-modal\n                    class="cpb-popup"\n                    v-model="model_elements"\n                    title="Adding Element"\n                    onOk="pickElement"\n                >\n                    <template slot="footer">\n                        <a-button key="submit" type="danger"  @click.prevent="closeModelElement">\n                            Ok\n                        </a-button>\n                    </template>\n                    \n                    <div class="cpb-wrap-elements">\n                        <a-collapse accordion v-model="collapse_element">\n                            <a-collapse-panel v-for="field in field_category" :header="field" :key="field">\n                                <a-col class="cpb-wrap-btn-com" v-if="elm.category == field" v-for="elm, index in valiable_elements" :key="elm.name + index" >\n                                    <a-button\n                                    class="cpb-btn-select-com"\n                                            @click.prevent="selectedElement(elm)">\n                                        <a-icon :type="typeof elm.icon != \'undefined\' ? elm.icon : \'form\'" ></a-icon>\n                                        {{ elm.label }}\n                                    </a-button>\n                                </a-col>\n                            </a-collapse-panel>\n                        </a-collapse>\n                    </div>\n                </a-modal>\n\n\n                <a-modal\n                    class="cpb-popup"\n                    :title="\'Setting: \' + current_element.label"\n                    centered\n                    v-model="modelSettingElement"\n                    @ok="saveSettingElement"\n                    >\n                    <div class="cpb-wrapsettings"> \n                        <cpb-popup-setting :named="named" :root="layouts" :current_element="current_element"/>\n                    </div>\n\n                    <template slot="footer">\n                        <a-button key="submit" type="primary"  @click.prevent="modelSettingElement = false">Close</a-button>\n                    </template>\n\n                </a-modal>\n            <!-- /Templates -->\n            <pre>{{ layouts }}</pre>\n        </div>\n    ',data:function(){return{model_elements:!1,current_col:{},current_element:{},mode_design:"md",modelSettingElement:!1,named:{},field_category:[],collapse_element:""}},mixins:{},watch:{layouts:{handler:function(){this.layouts=cpb.apply_filters("cpb_data_layout_changed",this.layouts);var that=this;that.named={},that.layouts.some(function(row){row.cols.some(function(col){col.elements.some(function(v){that.named[v.hash]=v.name})})}),console.log(that.named)},deep:!0}},mounted:function(){var elements=this.valiable_elements,that=this;elements.map(function(el){Object.keys(el.settings).map(function(key_setting){el.settings[key_setting]=that.re_formar_element(el.settings[key_setting])}),that.field_category.indexOf(el.category)<0&&that.field_category.push(el.category)}),0<that.field_category.length&&(that.collapse_element=that.field_category[0])},methods:{re_formar_element:function(element){return Object.assign({category:"General",type:"input",value:"",label:"Label",placeholder:"",description:"",require:!1},element)},saveSettingElement:function(){},openSettingRow:function(row){row=cpb.apply_filters("cpb_load_row_settings",row),this.current_element=row,this.modelSettingElement=!0},openSettingField:function(element){this.current_element=element,this.modelSettingElement=!0},addElement:function(col){this.model_elements=!0,this.current_col=col},closeModelElement:function(){this.model_elements=!1},selectedElement:function(__element){var element=Object.assign({},__element);element=cpb.apply_filters("cpb_before_add_field",element);var that=this;"string"!=typeof element.hash&&(element.hash="_"+Math.random().toString(36).substr(2,9)),"string"!=typeof element.error_message&&(element.error_message=""),Object.keys(element.settings).map(function(key_setting){element.settings[key_setting]=that.re_formar_element(element.settings[key_setting])}),this.current_col.elements.push(element),this.model_elements=!1,this.current_col={}},deleteRow:function(arrays,index){cpArrayFuncs.deleteByIndex(arrays,index)},deleteCol:function(arrays,index){cpArrayFuncs.deleteByIndex(arrays,index)},deleteElement:function(arrays,index){cpArrayFuncs.deleteByIndex(arrays,index)},getClassCol:function(col){var output=[];return"object"==_typeof(col.width)&&(output.push("cpb-md-"+col.width.md),output.push("cpb-sm-"+col.width.sm),output.push("cpb-xs-"+col.width.xs)),output.join(" ")},addCol:function(row){row.cols.push(this.generalCol(4))},addRow:function(number_of_col){var row={active:!0,type:"row",label:"Row",settings:{name:{type:"input",value:"15px",label:"Gutter",placeholder:"",description:""}},style:{},cols:[]};number_of_col=parseInt(number_of_col);for(var index=1;index<=number_of_col;index++)row.cols.push(this.generalCol(12/number_of_col));this.layouts.push(row)},generalCol:function(md,sm,xs){if(md=null==md?12:parseInt(md),null==sm)switch(md){case 1:case 2:case 3:case 4:sm=4;break;case 5:case 6:case 7:sm=6;break;case 8:case 9:case 10:case 11:case 12:default:sm=12}else sm=parseInt(sm);if(null==xs)switch(sm){case 1:case 2:case 3:xs=4;break;case 4:case 5:case 6:xs=6;break;case 7:case 8:case 9:case 10:case 11:case 12:xs=12;break;default:sm=12}else xs=parseInt(xs);return{type:"col",width:{md:md,sm:sm,xs:xs},settings:{},style:{},elements:[]}}}});
//# sourceMappingURL=main.min.js.map